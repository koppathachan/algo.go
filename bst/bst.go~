package bst

import (
	"fmt"
)

type Node interface {
	IsLess(node Node) bool
	//Left() Node
	//Right() Node
}

type node struct {
	left  *node
	right *node
	val   Node
}

func (n *node) Insert(val Node) {
	for val != nil {
		if val.IsLess(n.left.val) {
			if n.right == nil {
				n.right = &node{val: val}
			} else {
				n.right.Insert(val)
			}
		} else {
			if n.left == nil {
				n.left = &node{val: val}
			} else {
				n.left.Insert(val)
			}

		}
	}
}

type Root interface {
	Insert(node Node)
}

func From(arr []Node) Root {
	var root *node
	for _, a := range arr {
		if root == nil {
			root = &node{val: a}
		} else {
			root.Insert(a)
		}
	}
	return root
}

func NewRoot() Root {
	return &node{}
}

func PrintSomething() {
	fmt.Println("Something")
}
